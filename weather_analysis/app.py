import streamlit as st
import pandas as pd
from analyzer import analyze_city, open_weather_api, check_anomaly
from analyzer import validate_file
from plot_func import anomaly_pie_chart, seasonal_profile, weather_time_series


CURRENT_DATA = {}

def main():
    # –ö–æ–Ω—Ñ–∏–≥–∏ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
    st.set_page_config(
        page_title="–ê–Ω–∞–ª–∏–∑ –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö —Ä—è–¥–æ–≤ —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä—ã",
        page_icon="üìä"
    )

    st.title("–ê–Ω–∞–ª–∏–∑ –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö —Ä—è–¥–æ–≤ —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä—ã")

    # –ò–Ω—Ç–µ—Ä—Ñ–µ–π—Å –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–∞–π–ª–∞
    st.header("–ó–∞–≥—Ä—É–∑–∫–∞ —Ñ–∞–π–ª–∞ —Å –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏–º–∏ –¥–∞–Ω–Ω—ã–º–∏")
    uploaded_file = st.file_uploader("–ó–∞–≥—Ä—É–∑–∏—Ç–µ CSV —Ñ–∞–π–ª —Å –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏–º–∏ –¥–∞–Ω–Ω—ã–º–∏", type=["csv"])
    
    if uploaded_file:
        df = pd.read_csv(uploaded_file)

        # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ñ–∞–π–ª–∞
        is_valid, error = validate_file(df)

        # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –¥–∞–Ω–Ω—ã—Ö
        if is_valid:
            st.success("–§–∞–π–ª —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω!")
            df['timestamp'] = pd.to_datetime(df['timestamp'])
            
            # –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –ø–µ—Ä–≤—ã—Ö —Å—Ç—Ä–æ–∫ –¥–∞–Ω–Ω—ã—Ö
            st.subheader("–ù–∞—á–∞–ª—å–Ω—ã–µ —Å—Ç—Ä–æ–∫–∏ –∑–∞–≥—Ä—É–∂–µ–Ω–Ω–æ–≥–æ —Ñ–∞–π–ª–∞:")
            st.dataframe(df.head())
            
            # –ò–Ω—Ç–µ—Ä—Ñ–µ–π—Å –¥–ª—è –≤—ã–±–æ—Ä–∞ –≥–æ—Ä–æ–¥–∞
            st.header("–ì–æ—Ä–æ–¥ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞")
            cities_list = df['city'].unique()
            current_city = st.selectbox("–í—ã–±–µ—Ä–∏—Ç–µ –≥–æ—Ä–æ–¥ –∏–∑ —Å–ø–∏—Å–∫–∞ –Ω–∏–∂–µ", cities_list)

            if current_city:
                if current_city not in CURRENT_DATA:
                    CURRENT_DATA[current_city] = analyze_city(df, current_city)

                # –í—ã–≤–æ–¥ –æ–ø–∏—Å–∞—Ç–µ–ª—å–Ω–æ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
                st.subheader(f"–ò—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –¥–ª—è –≥–æ—Ä–æ–¥–∞ {current_city}")
                st.write(f"–°—Ä–µ–¥–Ω—è—è —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞: {CURRENT_DATA[current_city]['average_temperature']:.2f} ¬∞C")
                st.write(f"–ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞: {CURRENT_DATA[current_city]['min_temperature']:.2f} ¬∞C")
                st.write(f"–ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞: {CURRENT_DATA[current_city]['max_temperature']:.2f} ¬∞C")
                st.write(f"–¢—Ä–µ–Ω–¥: {CURRENT_DATA[current_city]['trend']}")
                anomaly_pie_chart(CURRENT_DATA[current_city]['total_cnt'], CURRENT_DATA[current_city]['anomalies_cnt'])

                # –ò–Ω—Ç–µ—Ä—Ñ–µ–π—Å –¥–ª—è –≤–≤–æ–¥–∞ API-–∫–ª—é—á–∞ OpenWeatherMap
                st.subheader("–ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–µ–∫—É—â–µ–π –ø–æ–≥–æ–¥—ã")
                api_key = st.text_input("–í–≤–µ–¥–∏—Ç–µ –≤–∞—à API-–∫–ª—é—á OpenWeatherMap", type="password")
                
                if api_key:
                    try:
                        result = open_weather_api(current_city, api_key)
                        if result:
                            temperature, description = result
                            st.success(f"–¢–µ–∫—É—â–∞—è —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞ –≤ –≥–æ—Ä–æ–¥–µ {current_city} —É—Å–ø–µ—à–Ω–æ –ø–æ–ª—É—á–µ–Ω–∞ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∞ –Ω–∏–∂–µ")
                            st.info(f"–¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞: {temperature} ¬∞C, –æ–±–ª–∞—á–Ω–æ—Å—Ç—å: {description}")
                            check_anomaly(temperature, CURRENT_DATA[current_city]['season_profile'])
                    except Exception as e:
                        st.error(f"–û—à–∏–±–∫–∞: {e}")
                else:
                    st.warning("API-–∫–ª—é—á –Ω–µ –≤–≤–µ–¥–µ–Ω.")

                st.header(f"–í—Ä–µ–º–µ–Ω–Ω–æ–π —Ä—è–¥ –¥–ª—è –≥–æ—Ä–æ–¥–∞ {current_city}")
                weather_time_series(CURRENT_DATA[current_city]['city_df'], CURRENT_DATA[current_city]['anomalies'])

                st.header(f"–°–µ–∑–æ–Ω–Ω—ã–π –ø—Ä–æ—Ñ–∏–ª—å –¥–ª—è –≥–æ—Ä–æ–¥–∞ {current_city}")
                seasonal_profile(CURRENT_DATA[current_city]['season_profile'])

        else:
            st.error(f"–§–∞–π–ª –Ω–µ –ø—Ä–æ—à—ë–ª –ø—Ä–æ–≤–µ—Ä–∫—É, –æ—à–∏–±–∫–∞: {error}")


if __name__ == "__main__":
    main()